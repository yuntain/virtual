<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.ssm.mapper.VirtualMapper" >
  <resultMap id="BaseResultMap" type="cn.ssm.po.Virtual" >
    <id column="vir_id" property="virId" jdbcType="INTEGER" />
    <result column="vir_name" property="virName" jdbcType="VARCHAR" />
    <result column="vir_memory" property="virMemory" jdbcType="VARCHAR" />
    <result column="vir_disk" property="virDisk" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="phy_id" property="phyId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    vir_id, vir_name, vir_memory, vir_disk, user_id, phy_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.ssm.po.VirtualExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from virtual
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from virtual
    where vir_id = #{virId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from virtual
    where vir_id = #{virId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.ssm.po.VirtualExample" >
    delete from virtual
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.ssm.po.Virtual" >
    insert into virtual (vir_id, vir_name, vir_memory, 
      vir_disk, user_id, phy_id
      )
    values (#{virId,jdbcType=INTEGER}, #{virName,jdbcType=VARCHAR}, #{virMemory,jdbcType=VARCHAR}, 
      #{virDisk,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, #{phyId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.ssm.po.Virtual" >
    insert into virtual
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="virId != null" >
        vir_id,
      </if>
      <if test="virName != null" >
        vir_name,
      </if>
      <if test="virMemory != null" >
        vir_memory,
      </if>
      <if test="virDisk != null" >
        vir_disk,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="phyId != null" >
        phy_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="virId != null" >
        #{virId,jdbcType=INTEGER},
      </if>
      <if test="virName != null" >
        #{virName,jdbcType=VARCHAR},
      </if>
      <if test="virMemory != null" >
        #{virMemory,jdbcType=VARCHAR},
      </if>
      <if test="virDisk != null" >
        #{virDisk,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="phyId != null" >
        #{phyId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.ssm.po.VirtualExample" resultType="java.lang.Integer" >
    select count(*) from virtual
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update virtual
    <set >
      <if test="record.virId != null" >
        vir_id = #{record.virId,jdbcType=INTEGER},
      </if>
      <if test="record.virName != null" >
        vir_name = #{record.virName,jdbcType=VARCHAR},
      </if>
      <if test="record.virMemory != null" >
        vir_memory = #{record.virMemory,jdbcType=VARCHAR},
      </if>
      <if test="record.virDisk != null" >
        vir_disk = #{record.virDisk,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.phyId != null" >
        phy_id = #{record.phyId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update virtual
    set vir_id = #{record.virId,jdbcType=INTEGER},
      vir_name = #{record.virName,jdbcType=VARCHAR},
      vir_memory = #{record.virMemory,jdbcType=VARCHAR},
      vir_disk = #{record.virDisk,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      phy_id = #{record.phyId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.ssm.po.Virtual" >
    update virtual
    <set >
      <if test="virName != null" >
        vir_name = #{virName,jdbcType=VARCHAR},
      </if>
      <if test="virMemory != null" >
        vir_memory = #{virMemory,jdbcType=VARCHAR},
      </if>
      <if test="virDisk != null" >
        vir_disk = #{virDisk,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="phyId != null" >
        phy_id = #{phyId,jdbcType=INTEGER},
      </if>
    </set>
    where vir_id = #{virId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.ssm.po.Virtual" >
    update virtual
    set vir_name = #{virName,jdbcType=VARCHAR},
      vir_memory = #{virMemory,jdbcType=VARCHAR},
      vir_disk = #{virDisk,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      phy_id = #{phyId,jdbcType=INTEGER}
    where vir_id = #{virId,jdbcType=INTEGER}
  </update>
</mapper>